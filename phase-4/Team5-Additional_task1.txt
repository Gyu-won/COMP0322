# Team5-Additional_task1.txt
### Concurrency Control On Reservation (같은 좌석 여러 사람 예약)
###### src/main/java/reservation/ReservationDAO.java/completeReserve
``` java
public int completeReserve(Reservation reservation, String userAID, String tid, String sid, String age, int fee) {
		
		int price = 0;
		sql = "SELECT POINT FROM ACCOUNT WHERE AID = '" + userAID + "'";
		try {
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);			
			while(rs.next()) {
				price = rs.getInt(1) - fee;
				if(price < 0) {
					return 0;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		try {
			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		}catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		sql = "INSERT INTO RESERVATION VALUES(?, ?, ?, ?)";
		reservation.setRaid(userAID);
		reservation.setRtid(tid);
		
		String[] ageValue = {"9-", "18-", "18+"};
		int[] ages = {Integer.valueOf(age.charAt(0))-48, Integer.valueOf(age.charAt(1))-48, Integer.valueOf(age.charAt(2))-48};
		
		String[] list = sid.split(",");
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userAID);
			pstmt.setString(3, tid);
			
			
			for(int i = 0; i < list.length; i++) {
				pstmt.setString(2,  list[i]);
				for(int j = 0; j < ages.length; j++) {
					if(ages[j] != 0) {
						pstmt.setString(4, ageValue[j]);
						ages[j]--;
						break;
					}
				}
				
				int cnt = pstmt.executeUpdate();
			}
			
		} catch(SQLIntegrityConstraintViolationException e) {
			return 2;
		}
		catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		sql = "UPDATE ACCOUNT SET POINT = " + price + " WHERE AID = '" + userAID + "'"; 
		try {
			stmt = conn.createStatement();
			int count = stmt.executeUpdate(sql);	
			Thread.sleep(3000);
			conn.commit();
			return 1;
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}
```

### Concurrency Control On Cancel Reservation (포인트 환불)
###### SET Transaction Isolation Code
``` java
try {
			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		}catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
```

- transaction isolation level을 SERIALIZABLE로 설정
1. A와 B가 동시 예매를 할 때
2. A가 Insert into Reservation... 을 수행하고 Commit하기 전까지
3. B의 Transaction을 멈춰 놓게 하여
4. A와 B가 같은 예약을 할 수 없도록 함

###### src/main/java/reservation/ReservationDAO.java/cancelReservation Code
```java
public int cancelReservation(Reservation reservation) {
		int price = 0, count = -1;
		
		String sid = reservation.getRsid();
		String aid = reservation.getRaid();
		String tid = reservation.getRtid();
		String age = reservation.getRage();
		
		try {
			conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		}catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
		sql = "DELETE FROM RESERVATION WHERE RSID = '" + sid + "' AND RTID = '" + tid + "'";
		
		try {
			stmt = conn.createStatement();
			count = stmt.executeUpdate(sql);
		
			System.out.println(count);
			if(count == 0) {
				return 2;
			}
			
			sql = "SELECT P.FEE FROM PRICE P WHERE P.AGE = '" + age + "' AND ((P.BUSTYPE, P.PRID) = (SELECT B.BTYPE, T.TRID"
					+ " FROM BUS B, TIMETABLE T WHERE B.BID = T.TBID AND T.TID = '" + tid + "'))";
			try {
				rs = stmt.executeQuery(sql);
				while(rs.next()) {
					price = rs.getInt(1);
				}
				conn.commit();
			}catch (Exception e) {
				e.printStackTrace();
				return -1;
			}

		}catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
		
	
		
		try {
			sql = "UPDATE ACCOUNT SET POINT = POINT + " + String.valueOf(price) + " WHERE AID = '" + aid + "'";
			stmt.executeUpdate(sql);
			
			Thread.sleep(3000);
			conn.commit();
			return 1;
		}catch (Exception e) {
			e.printStackTrace();
			return -1;
		}	
	}
```
- transaction isolation level을 SERIALIZABLE로 설정
1. A가 다른 디바이스에서 같은 계정으로 같은 예약을 취소하는 경우 (or 여러 번 클릭)
2. table update를 commit 하기 전까지 다른 transaction은 대기하여
3. 취소가 여러 번 되어 포인트가 여러 번 들어오는 것을 막음